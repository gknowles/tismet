; queryfunc.abnf - tismet query
; Generated by genfuncs 1.0.0

;----------------------------------------------------------------------------
; Functions
;----------------------------------------------------------------------------
func =/ fn-absolute { End }
fn-absolute = %s"absolute(" arg-query ")" { Start }

func =/ fn-aggregate { End }
fn-aggregate = %s"aggregate(" arg-query "," arg-aggFunc ")" { Start }

func =/ fn-alias { End }
fn-alias = %s"alias(" arg-query "," arg-string ")" { Start }

func =/ fn-aliasSub { End }
fn-aliasSub = %s"aliasSub(" arg-query "," arg-string "," arg-string ")" { Start }

func =/ fn-averageAbove { End }
fn-averageAbove = %s"averageAbove(" arg-query "," arg-num ")" { Start }

func =/ fn-averageBelow { End }
fn-averageBelow = %s"averageBelow(" arg-query "," arg-num ")" { Start }

func =/ fn-averageSeries / fn-avg { End }
fn-averageSeries = %s"averageSeries(" arg-query *( "," arg-query ) ")" { Start }
fn-avg = %s"avg(" arg-query *( "," arg-query ) ")" { Start, As fn-averageSeries }

func =/ fn-color { End }
fn-color = %s"color(" arg-query "," arg-string ")" { Start }

func =/ fn-consolidateBy { End }
fn-consolidateBy = %s"consolidateBy(" arg-query "," arg-aggFunc ")" { Start }

func =/ fn-countSeries { End }
fn-countSeries = %s"countSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-currentAbove { End }
fn-currentAbove = %s"currentAbove(" arg-query "," arg-num ")" { Start }

func =/ fn-currentBelow { End }
fn-currentBelow = %s"currentBelow(" arg-query "," arg-num ")" { Start }

func =/ fn-derivative { End }
fn-derivative = %s"derivative(" arg-query ")" { Start }

func =/ fn-diffSeries { End }
fn-diffSeries = %s"diffSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-drawAsInfinite { End }
fn-drawAsInfinite = %s"drawAsInfinite(" arg-query ")" { Start }

func =/ fn-filterSeries { End }
fn-filterSeries = %s"filterSeries(" arg-query "," arg-aggFunc "," arg-operator "," arg-num ")" { Start }

func =/ fn-firstSeries { End }
fn-firstSeries = %s"firstSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-highestCurrent { End }
fn-highestCurrent = %s"highestCurrent(" arg-query "," arg-num ")" { Start }

func =/ fn-highestMax { End }
fn-highestMax = %s"highestMax(" arg-query "," arg-num ")" { Start }

func =/ fn-keepLastValue { End }
fn-keepLastValue = %s"keepLastValue(" arg-query [ "," arg-num ] ")" { Start }

func =/ fn-lastSeries { End }
fn-lastSeries = %s"lastSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-legendValue { End }
fn-legendValue = %s"legendValue(" arg-query *( "," arg-string ) ")" { Start }

func =/ fn-lineWidth { End }
fn-lineWidth = %s"lineWidth(" arg-query "," arg-num ")" { Start }

func =/ fn-maximumAbove { End }
fn-maximumAbove = %s"maximumAbove(" arg-query "," arg-num ")" { Start }

func =/ fn-maximumBelow { End }
fn-maximumBelow = %s"maximumBelow(" arg-query "," arg-num ")" { Start }

func =/ fn-maxSeries { End }
fn-maxSeries = %s"maxSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-medianSeries { End }
fn-medianSeries = %s"medianSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-minimumAbove { End }
fn-minimumAbove = %s"minimumAbove(" arg-query "," arg-num ")" { Start }

func =/ fn-minimumBelow { End }
fn-minimumBelow = %s"minimumBelow(" arg-query "," arg-num ")" { Start }

func =/ fn-minSeries { End }
fn-minSeries = %s"minSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-movingAverage { End }
fn-movingAverage = %s"movingAverage(" arg-query "," (arg-num / arg-string) [ "," arg-num ] ")" { Start }

func =/ fn-multiplySeries { End }
fn-multiplySeries = %s"multiplySeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-nonNegativeDerivative { End }
fn-nonNegativeDerivative = %s"nonNegativeDerivative(" arg-query [ "," arg-num ] ")" { Start }

func =/ fn-rangeSeries { End }
fn-rangeSeries = %s"rangeSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-removeAboveValue { End }
fn-removeAboveValue = %s"removeAboveValue(" arg-query "," arg-num ")" { Start }

func =/ fn-removeBelowValue { End }
fn-removeBelowValue = %s"removeBelowValue(" arg-query "," arg-num ")" { Start }

func =/ fn-scale { End }
fn-scale = %s"scale(" arg-query "," arg-num ")" { Start }

func =/ fn-scaleToSeconds { End }
fn-scaleToSeconds = %s"scaleToSeconds(" arg-query "," arg-num ")" { Start }

func =/ fn-stddevSeries { End }
fn-stddevSeries = %s"stddevSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-sumSeries / fn-sum { End }
fn-sumSeries = %s"sumSeries(" arg-query *( "," arg-query ) ")" { Start }
fn-sum = %s"sum(" arg-query *( "," arg-query ) ")" { Start, As fn-sumSeries }

func =/ fn-timeShift { End }
fn-timeShift = %s"timeShift(" arg-query "," arg-string ")" { Start }

;----------------------------------------------------------------------------
; Enumeration arguments
;----------------------------------------------------------------------------
arg-aggFunc = *WSP (DQUOTE enum-aggFunc DQUOTE / "'" enum-aggFunc "'") *WSP
enum-aggFunc =/ %s"average" { As string, Start+, End+ }
enum-aggFunc =/ %s"avg" { As string, Start+, End+ }
enum-aggFunc =/ %s"count" { As string, Start+, End+ }
enum-aggFunc =/ %s"diff" { As string, Start+, End+ }
enum-aggFunc =/ %s"first" { As string, Start+, End+ }
enum-aggFunc =/ %s"last" { As string, Start+, End+ }
enum-aggFunc =/ %s"current" { As string, Start+, End+ }
enum-aggFunc =/ %s"max" { As string, Start+, End+ }
enum-aggFunc =/ %s"median" { As string, Start+, End+ }
enum-aggFunc =/ %s"min" { As string, Start+, End+ }
enum-aggFunc =/ %s"multiply" { As string, Start+, End+ }
enum-aggFunc =/ %s"range" { As string, Start+, End+ }
enum-aggFunc =/ %s"rangeOf" { As string, Start+, End+ }
enum-aggFunc =/ %s"stddev" { As string, Start+, End+ }
enum-aggFunc =/ %s"sum" { As string, Start+, End+ }
enum-aggFunc =/ %s"total" { As string, Start+, End+ }

arg-operator = *WSP (DQUOTE enum-operator DQUOTE / "'" enum-operator "'") *WSP
enum-operator =/ %s"eq" { As string, Start+, End+ }
enum-operator =/ %s"=" { As string, Start+, End+ }
enum-operator =/ %s"ne" { As string, Start+, End+ }
enum-operator =/ %s"!=" { As string, Start+, End+ }
enum-operator =/ %s"<>" { As string, Start+, End+ }
enum-operator =/ %s"gt" { As string, Start+, End+ }
enum-operator =/ %s">" { As string, Start+, End+ }
enum-operator =/ %s"ge" { As string, Start+, End+ }
enum-operator =/ %s">=" { As string, Start+, End+ }
enum-operator =/ %s"lt" { As string, Start+, End+ }
enum-operator =/ %s"<" { As string, Start+, End+ }
enum-operator =/ %s"le" { As string, Start+, End+ }
enum-operator =/ %s"<=" { As string, Start+, End+ }

