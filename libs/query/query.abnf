; Copyright Glen Knowles 2017 - 2018.
; Distributed under the Boost Software License, Version 1.0.
;
; query.abnf - tismet query
;
; rules to parse graphite queries
%root = query
%api.prefix = Query
%api.parser.file.h = queryparseint.h
%api.base.file.h = queryparsebaseint.h


query = path / func { Function }

;----------------------------------------------------------------------------
; Path
;----------------------------------------------------------------------------
path = path-seg *("." path-seg) { Start, End }
path-seg = 1*(seg-literal / seg-blot / seg-char-list / seg-seg-list)
    { Start, End }

; *
seg-literal = 1*scl-char { Start+, End+ }
seg-blot = "*" { End }

; [] - allows '-' ranges, but not negation (leading '^')
seg-char-list = "[" [scl-dash] *(scl-single-nd ["-" scl-range-end])
    [scl-single] "]" { End }
scl-single = scl-char { Char+ }
scl-single-nd = scl-char-nd { Char+, As scl-single }
scl-dash = "-" { Char+, As scl-single }
scl-range-end = scl-char-nd { Char+ }

; {,,,}
seg-seg-list = "{" ssl-segs "}"
ssl-segs = *WSP [path-seg] *WSP 1*(ssl-comma *WSP path-seg *WSP)
    { Start, End, Function }
ssl-comma = "," { End }

scl-char-nd = ALPHA / DIGIT
    / "!" / DQUOTE / "#" / "$" / "%" / "&" / "'"
    / "+"
    / ":" / ";" / "<" / "=" / ">" / "?"
    / "@" / "\" / "^" / "_"
    / "`" / "~"
scl-char = scl-char-nd / "-"

;----------------------------------------------------------------------------
; Function arguments
;----------------------------------------------------------------------------
arg-query = *WSP query *WSP { Start }
arg-num = *WSP number *WSP { End }
arg-string = *WSP (DQUOTE string DQUOTE / "'" string-ns "'") *WSP

; String
string = *(%x20-21 / %x23-7E) { Start+, End+ }
string-ns = *(%x20-26 / %x28-7E) { As string, Start+, End+ }

; Timestamp
timestamp = 1*DIGIT { Char+ }

; Number
number = [minus] int [frac] [exp] ; { Function }
decimal-point = "."
digit1-9 = %x31-39 ; 1-9
e = "e" ; e E
exp = e [exp-minus / exp-plus] exp-num
exp-minus = "-" { End }
exp-plus = "+"
exp-num = 1*DIGIT { Char+ }
frac = decimal-point frac-num
frac-num = 1*DIGIT { Char+ }
int = zero / (digit1-9 *DIGIT) { Char+ }
minus = "-" { End }
zero = "0"

;----------------------------------------------------------------------------
; Functions
;----------------------------------------------------------------------------
func = fn-alias { End }
fn-alias = %s"alias(" arg-query "," arg-string ")" { Start }

func =/ fn-aliasSub { End }
fn-aliasSub = %s"aliasSub(" arg-query "," arg-string "," arg-string ")"
    { Start }

func =/ fn-avg / fn-averageSeries
fn-avg = %s"avg(" arg-query *( "," arg-query ) ")"
    { Start, As fn-averageSeries }
fn-averageSeries = %s"averageSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-color { End }
fn-color = %s"color(" arg-query "," arg-string ")" { Start }

func =/ fn-countSeries
fn-countSeries = %s"countSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-derivative
fn-derivative = %s"derivative(" arg-query ")" { Start }

func =/ fn-diffSeries
fn-diffSeries = %s"diffSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-drawAsInfinite
fn-drawAsInfinite = %s"drawAsInfinite(" arg-query ")" { Start }

func =/ fn-highestCurrent
fn-highestCurrent = %s"highestCurrent(" arg-query "," arg-num ")" { Start }

func =/ fn-highestMax
fn-highestMax = %s"highestMax(" arg-query "," arg-num ")" { Start }

func =/ fn-keepLastValue
fn-keepLastValue = %s"keepLastValue(" arg-query [ "," arg-num ] ")" { Start }

func =/ fn-legendValue
fn-legendValue = %s"legendValue(" arg-query *( "," arg-string ) ")" { Start }

func =/ fn-lineWidth
fn-lineWidth = %s"lineWidth(" arg-query "," arg-num ")" { Start }

func =/ fn-maximumAbove
fn-maximumAbove = %s"maximumAbove(" arg-query "," arg-num ")" { Start }

func =/ fn-maxSeries
fn-maxSeries = %s"maxSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-minSeries
fn-minSeries = %s"minSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-movingAverage
fn-movingAverage = %s"movingAverage("
    arg-query "," (arg-string / arg-num) [ "," arg-num ] ")" { Start }

func =/ fn-multiplySeries
fn-multiplySeries = %s"multiplySeries(" arg-query *( "," arg-query ) ")"
    { Start }

func =/ fn-nonNegativeDerivative
fn-nonNegativeDerivative = %s"nonNegativeDerivative("
    arg-query [ "," arg-num ] ")" { Start }

func =/ fn-removeAboveValue
fn-removeAboveValue = %s"removeAboveValue(" arg-query "," arg-num ")" { Start }

func =/ fn-removeBelowValue
fn-removeBelowValue = %s"removeBelowValue(" arg-query "," arg-num ")" { Start }

func =/ fn-scale
fn-scale = %s"scale(" arg-query "," arg-num ")" { Start }

func =/ fn-scaleToSeconds
fn-scaleToSeconds = %s"scaleToSeconds(" arg-query "," arg-num ")" { Start }

func =/ fn-sum / fn-sumSeries
fn-sum = %s"sum(" arg-query *( "," arg-query ) ")" { Start, As fn-sumSeries }
fn-sumSeries = %s"sumSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-stddevSeries
fn-stddevSeries = %s"stddevSeries(" arg-query *( "," arg-query ) ")" { Start }

func =/ fn-timeShift
fn-timeShift = %s"timeShift(" arg-query "," arg-string ")" { Start }
